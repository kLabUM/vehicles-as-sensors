%% This function generates a precipitation map by fusing windshield-wiper measurements to the radar
function savData = mapUpdate(weight,dSamp,vehicleData,radarData,lonNet,latNet)

%% input and output
%
% input: 
%   - weight: weight on radar prior (0~1)
%   - dSamp: downsample rate (for space aggregation for speed)
%   - vehicleData: vehicle data (time-stamped locations, windshield wiper measurements,etc)    
%   - radarData: radar data
%   - wiperData: wiper data
%   - lonNet: range of the longitude values
%   - latNet: range of the latitude values
%
% output: 
%   - savData(i,1): radar map, [m x 3], 
%   - savData(i,2): fused map (radar+wiper), [m x 3]
% where m is the number of grid cells, and each row represents 
% [gps location {lon,lat}, rain intensity]
%   - savData(i,3): vehicle locations where wiper measurements were made, [l
%   x 2], l is the number of vehicles

%% list of functions needed

% drawNoFigure.m    a function used to downsample the given map
% drawFigure.m      a function used to downsample and display the given map
% nearestPntDist.m  Euclidean distances between a point and set of points
% sirFilter.m       SIR filter

%% windshield wiper intensity

% Value   Name
% 0       Off
% 1       Delay
% 2       Low
% 3       High
% 4       Mist
% 5       Error

%% settings
nsampInfo = 10000;      % number of information sample
% dSamp = 12;           % down-sample, e.g., 1/8, smaller the value, the more accurate

varInfo = 0.001;        % how noisy the sensor is (e.g., 0: perfect) default 0.01....
varPos = 0.01;          % decay as the distance between the windshield wiper measurement and the source of rain, increases...
wiperToIntensity = 0.1; % map wiper 'on' measurement to a precipitation intensity (between 0 and 1), e.g., 'on' -> 0.1, 'off' -> 0

deviceIdIdx = 1;        % device id
tripIx = 2;             % trip id
latIx = 3;              % latitude
lonIx = 4;              % longitude
wiperIx = 5;            % wiper measurement
gpsSpeedIx = 6;         % gps forward speed
cameraIx = 7;           % camera measurement
radarIx = 8;            % radar intensity
gageIx = 9;             % gage measurement
tStepIx = 10;           % time step
yStepIx = 11;           % x coordinate
xStepIx = 12; % 9       % y coordinate


% change scale (GPS locations -> [0, 1]x[0, 1]) % for the sake of convenience

lonNetScaled=(lonNet-min(lonNet))/(max(lonNet) - min(lonNet));
latNetScaled=(latNet-min(latNet))/(max(latNet) - min(latNet));

% radius of rain detection for each vehicle (scaled based upon our scaled area [0,1]x[0,1])

radD = 0.1;


% generate timeseries data {radar}

for i = 1:size(radarData,3)
    radarTSeries{i} = radarData(:,:,i);
end

% extract effective radar measurements (with non-NaNs)

radarIdx = [];
for i = 1:length(radarTSeries)
    if ~isempty(find(radarTSeries{i}, 1))
        radarIdx(end+1) = i;
    end
end

% number of runs for a finite time horizeon

nRuns = max(unique(vehicleData(:,tStepIx)));

% generate matrix M to plot the radar measurements

M(:,1) = repmat(lonNetScaled,size(radarTSeries{1},2),1);
lvec = [];
for i= 1:size(radarTSeries{1},2)
    lvec = [lvec;repmat(latNetScaled(i),size(radarTSeries{1},1),1)];
end
M(:,2) = lvec;
M(:,3) = radarTSeries{1}(:);

[qx,qy,qz] = drawNoFigure(M,radarTSeries{1},dSamp);


%%
clear M;

M = [qx(:) qy(:) qz(:)];

% let ground truth be 1 for all regions...

gTruth = ones(size(M,1),1);

% generate samples for information vector

hSet2 = haltonset(1,'Skip',1e3,'Leap',1e2);
hScrambled2 = scramble(hSet2,'RR2');

% find the maximum radar intensity value (for normalization purpose)

maxes = [];
for i=1:nRuns
    maxes(i) = max(max(radarTSeries{i}));    
end
grandmax = max(maxes);
sampInfo = net(hScrambled2,nsampInfo) ;


% we may apply uniform prior at initial time (0)
% since there is no other information 

prvWgt1 = ones(size(sampInfo,1),size(M,1))/size(sampInfo,1);
prvWgt = prvWgt1;

% generate samples for locations (use M)

sampPos = M(:,1:2);

% expected value for the information, e.g., rain intensity...

particleWgt = sampInfo'*prvWgt;

% update M using the weighted prior

M(:,3) =particleWgt'/max(sampInfo);

% save initial data {map}

savData{1,1} = M;
savData{1,2} = M;
savData{1,3} = [];

% only consider the times when a particular vehicle with ID from 'excludedVehicleID' were excluded
% this is find for generating ROC curvers, if
%   weight = 1, i.e., prior is the lastest ladar measurements

timeHorz = 1:1+max(unique(vehicleData(:,tStepIx)));


% if such time does at all exists,
if ~isempty(timeHorz)
    for u1 = 1:length(timeHorz)     % for each time from the 'timeHorz'
        curStep = timeHorz(u1)      % current time step

        %% unfiltered (but sampled) radar measurements for later use...
        clear Mt;
        Mt(:,1) = repmat(lonNetScaled,size(radarTSeries{curStep},2),1);
        lvec = [];
        for i= 1:size(radarTSeries{curStep},2)
            lvec = [lvec;repmat(latNetScaled(i),size(radarTSeries{curStep},1),1)];
        end
        Mt(:,2) = lvec;
        Mt(:,3) = radarTSeries{curStep}(:)/grandmax;
        [qx,qy,qz] = drawNoFigure(Mt,radarTSeries{curStep},dSamp);
        clear Mt;
        Mt = [qx(:) qy(:) qz(:)];    
        savData{curStep+1,1} = Mt;
        
        %% update prior using the radar and the previous prior
        % if 'weight == 1' then only the radar measurement is used as a
        % prior, otherwise the map generated at the previous time-step is
        % considered along with the radar measurement
        % prior update formula:
        %
        %       new prior = (previous prior)*(1-weight) + (radar measurement)*weight
        %
        
        clear M;
        
        % generate M which is a belief matrix generated using the radar map
        
        M(:,1) = repmat(lonNetScaled,size(radarTSeries{curStep},2),1);
        lvec = [];
        for i= 1:size(radarTSeries{curStep},2)
            lvec = [lvec;repmat(latNetScaled(i),size(radarTSeries{curStep},1),1)];
        end
        M(:,2) = lvec;
        M(:,3) = radarTSeries{curStep}(:)/grandmax;         % normalize
        [qx,qy,qz] = drawNoFigure(M,radarTSeries{curStep},dSamp);
        clear M;
        M = [qx(:) qy(:) qz(:)];
        
        % transform belief matrix (radar) to weights
        prvWgt0 = [];
        for i = 1:size(M,1)
            p0 = mvnpdf(sampInfo,M(i,3),varInfo)/sum(mvnpdf(sampInfo,M(i,3),varInfo)); 
            prvWgt0 = [prvWgt0 p0];
        end
        
        % update prior: new prior = weight*(new radar measurement) + (1-weight)*(previous prior)
        
        prvWgt = weight*prvWgt0 + (1-weight)*prvWgt;

        % compute prior radar intensity values (normalized)
        
        for i = 1:size(sampPos,1)
            particleWgtRad{curStep}(:,i) = sampInfo' * prvWgt(:,i);
        end
        
        
        %% fuse windshield wiper measurement
        
        % find time frame where there is windshield-wiper measurement 
        
        wiperOnIdx = find(vehicleData(:,tStepIx) == curStep);
        
        if ~isempty(wiperOnIdx)
        
            % find unique vehicle IDs
            
            vehicleID = unique(vehicleData(:,deviceIdIdx));
            wiperInfo = [];        
            vehicleDataEff = vehicleData(wiperOnIdx,:);
            
            % scale GPS locations to fit [0, 1] x [0, 1]
            
            vehicleDataEff(:,lonIx)=(vehicleDataEff(:,lonIx)-min(lonNet))/(max(lonNet) - min(lonNet));
            vehicleDataEff(:,latIx)=(vehicleDataEff(:,latIx)-min(latNet))/(max(latNet) - min(latNet));
            
            % find the nearest points from the downsampled map to vehicle locations
            
            clear nearPos;
            
            for i = 1:size(vehicleDataEff,1)  
                [~,nearPos(i)] = nearestPntDist([vehicleDataEff(i,lonIx) vehicleDataEff(i,latIx)],[qx(:),qy(:)]);
            end

            % [winshield wiper data, vehicle positions on the map]
            
            vehicleDataEff = [vehicleDataEff nearPos'];

            % find unique vehicle positions
            
            [nearPosUniq, idv] = unique(nearPos);

            % counter
            
            k = 0;
            for i = 1:length(nearPosUniq)
                
                % find windshield wiper value(wiperIx), and vehicleID(deviceIdIdx) at unique vehicle positions...
                
                nearPosUniqWiper{i,1}=vehicleDataEff(find(vehicleDataEff(:,end) == nearPosUniq(i)),wiperIx);
                nearPosUniqWiper{i,2}=vehicleDataEff(find(vehicleDataEff(:,end) == nearPosUniq(i)),deviceIdIdx);

                % for each vehicle (with different IDs)
                
                for j = 1:length(vehicleID)
                        if ~isempty(find(nearPosUniqWiper{i,2}==vehicleID(j)))
                            k = k+1;
                            
                            % take mean of the windshield-wiper measurements made by each vehicle
                            % 'median' can be used in place of 'mean' to
                            % provide more robust estimate
                            
                            t_val = mean(nearPosUniqWiper{i,1}(find(nearPosUniqWiper{i,2}==vehicleID(j)),:));
                            if isnan(t_val)
                                t_val = 0;
                            end
                            nearPosMed(k,:) = [nearPosUniq(i) vehicleID(j) min(t_val,3)];
                        end
                end
            end

            clear M;

            M(:,1) = qx(:);M(:,2) = qy(:);

            % find indice for unique vehicle positions with windshield-wiper measurements
            
            if exist('nearPosMed')
                rainIdx = nearPosMed(:,1);
            end

            % obtain rain detection likelihoods from the wind-shield wiper measurements
            
            for i_2 = 1:size(M,1)
                misDetectLhd = 1;
                if exist('nearPosMed')
                    [out1, out2] = nearestPntDist(M(i_2,1:2),M(rainIdx,1:2));
                    if out1 <= radD
                        if round(nearPosMed(out2,3)) == 1
                            gTruth(i_2) = wiperToIntensity;
                        elseif round(nearPosMed(out2,3)) ==2
                            gTruth(i_2) = wiperToIntensity * 2;
                        elseif round(nearPosMed(out2,3)) == 3
                            gTruth(i_2) = wiperToIntensity * 3;
                        else
                            gTruth(i_2) = Mt(i_2,3);
                        end
                        misDetectLhd = misDetectLhd * (1-mvnpdf(M(i_2,1:2),M(rainIdx(out2),1:2),eye(2)*varPos)/mvnpdf([0 0],[0 0],eye(2)*varPos));
                    else
                        misDetectLhd = 1;
                        gTruth(i_2)=Mt(i_2,3);
                    end   
                end
                detectLhd(i_2) = 1-misDetectLhd;
            end

            % obtain observation likelihoods
            
            for i = 1:size(sampPos,1)
                for j = 1:length(sampInfo)
                      infoLhd{i}(j)=normpdf(sampInfo(j),gTruth(i,:),varInfo)/normpdf(0,0,varInfo);
                end

                for j = 1:length(sampInfo)
                      infoLhdU{i}(j)=normpdf(sampInfo(j),Mt(i,3),varInfo)/normpdf(0,0,varInfo);
                end
                %infoLhd{i} = (infoLhd{i}-1/max(gTruth)) * detectLhd(i)+ 1/max(gTruth);
                
                % likelihood of the measurement depends on the likelihood
                % of detection
                
                infoLhd{i} = infoLhd{i} * detectLhd(i)+ infoLhdU{i} * (1-detectLhd(i));
                
                % direc-delta function approximation
                
                if all(infoLhd{i} == 0)
                    [~,idx_tmp] = min((repmat(gTruth(i,:),size(sampInfo,1),1) - sampInfo).^2);
                    infoLhd{i}(idx_tmp) = 1;
                end
            end
            
            % SIR particle filter
            
            for i = 1:size(sampPos,1)
                wgt2(:,i) = sirFilter(infoLhd{i}',prvWgt(:,i));
                prvWgt(:,i) = wgt2(:,i);                
            end

            for i = 1:size(sampPos,1)
                particleWgt(:,i) = sampInfo' * wgt2(:,i);
            end
            clear M;        
            M(:,1) = qx(:);
            M(:,2) = qy(:);        
            M(:,3) =particleWgt'./max(sampInfo);    

            nearPosUniqVal = [];
            for j = 1:length(nearPosUniq)
                nearPosUniqVal = [nearPosUniqVal;[vehicleDataEff(find(vehicleDataEff(:,end) == nearPosUniq(j)),4) vehicleDataEff(find(vehicleDataEff(:,end) == nearPosUniq(j)),3)]];
            end
            
            % save 
            savData{curStep+1,2} = M;                    
            savData{curStep+1,3} = nearPosUniqVal;

        else
            % if there is no wiper measurements (at current time step)
            
            clear M;
            M(:,1) = qx(:);
            M(:,2) = qy(:);        
            M(:,3) =particleWgtRad{curStep}'./max(sampInfo);   
            savData{curStep+1,2} = M;                 % save data...            
        end

%         drawFigure(savData{curStep+1,1},radarData(:,:,curStep),dSamp);
%         drawFigure(savData{curStep+1,2},radarData(:,:,curStep),dSamp);hold on;
%         if ~isempty(savData{curStep+1,3})
%             plot(savData{curStep+1,3}(:,1),savData{curStep+1,3}(:,2),'ok');
%         end
    end
else
    % handle exceptions
    error('data is not available')
end

